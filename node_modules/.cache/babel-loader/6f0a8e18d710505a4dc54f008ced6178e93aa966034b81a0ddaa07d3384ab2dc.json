{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marzo\\\\OneDrive\\\\Desktop\\\\Fillm web\\\\Film Web Site Without Redux - Copy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './components/navBar/navBar';\nimport FilmList from './components/FilmList/FilmList';\nimport FilmDetail from './components/FilmDetail/FilmDetail';\nimport { Routes, Route, BrowserRouter } from 'react-router-dom';\nimport axios from 'axios';\nimport { getAllMovie } from './redux/';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [items, setItems] = useState([]);\n  const [option, setOption] = useState('movie');\n  const [language, setLanguage] = useState('en');\n  const [page, setPage] = useState('1');\n  const [totalPageNumber, setTotalPageNumber] = useState();\n  const getData = async () => {\n    try {\n      const response = await axios.get(`https://api.themoviedb.org/3/discover/${option}?api_key=d0479c49cb948d6ad0bb103813fe9e3c&language=${language}-US&page=${page}`);\n      setItems(response.data.results);\n      setTotalPageNumber(response.data.total_pages);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const linkImg = 'https://image.tmdb.org/t/p/w500';\n  useEffect(() => {\n    getData();\n  }, [option, language, page]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        setItems: setItems,\n        getData: getData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(FilmList, {\n            items: items,\n            linkImg: linkImg,\n            option: option,\n            setOption: setOption,\n            setLanguage: setLanguage,\n            setPage: setPage,\n            totalPageNumber: totalPageNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/movie/:id\",\n          element: /*#__PURE__*/_jsxDEV(FilmDetail, {\n            linkImg: linkImg,\n            items: items\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"vpfeLyN7fwCOD0W7O7EOgzryiP0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","NavBar","FilmList","FilmDetail","Routes","Route","BrowserRouter","axios","getAllMovie","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","items","setItems","option","setOption","language","setLanguage","page","setPage","totalPageNumber","setTotalPageNumber","getData","response","get","data","results","total_pages","err","console","error","linkImg","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["C:/Users/marzo/OneDrive/Desktop/Fillm web/Film Web Site Without Redux - Copy/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './components/navBar/navBar';\nimport FilmList from './components/FilmList/FilmList';\nimport FilmDetail from './components/FilmDetail/FilmDetail';\nimport { Routes, Route, BrowserRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nimport {getAllMovie} from './redux/'\n\nfunction App() {\n  const [items, setItems] = useState([]);\n  const [option, setOption] = useState('movie');\n  const [language, setLanguage] = useState('en');\n  const [page, setPage] = useState('1');\n  const [totalPageNumber, setTotalPageNumber] = useState();\n\n  const getData = async () => {\n    try {\n      const response = await axios.get(\n        `https://api.themoviedb.org/3/discover/${option}?api_key=d0479c49cb948d6ad0bb103813fe9e3c&language=${language}-US&page=${page}`\n      );\n      setItems(response.data.results);\n      setTotalPageNumber(response.data.total_pages);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n\n\n  const linkImg = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    getData();\n  }, [option, language, page]);\n\n  return (\n    <>\n      <BrowserRouter>\n        <NavBar setItems={setItems} getData={getData} />\n        <Routes>\n          <Route\n            path='/'\n            element={\n              <FilmList\n                items={items}\n                linkImg={linkImg}\n                option={option}\n                setOption={setOption}\n                setLanguage={setLanguage}\n                setPage={setPage}\n                totalPageNumber={totalPageNumber}\n              />\n            }\n          />\n          <Route path='/movie/:id' element={<FilmDetail linkImg={linkImg} items={items} />} />\n        </Routes>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}